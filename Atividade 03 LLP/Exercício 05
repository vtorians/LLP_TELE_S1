1. Atividade com `while`:
- Descrição: Escreva um programa que exiba os números pares de 1 a 10 usando um loop `while`.
- Dica: Use o operador de módulo (`%`) para verificar se um número é par.

#include <stdio.h>

int main() {
    int i = 1;

    while (i <= 10) {
        if (i % 2 == 0) {
            printf("%d é par\n", i);
        }
        i++;
    }

    return 0;
}


2. Atividade com `do while`:
- Descrição: Crie um programa que solicite ao usuário que adivinhe um número entre 1 e 100. O programa deve continuar pedindo até que o usuário acerte o número ou digite `-1` para sair.
- Dica: Use um loop `do while` para repetir a solicitação.

c

Verify

Open In Editor
Edit
Copy code
#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main() {
    int numeroSorteado = rand() % 100 + 1;
    int numeroDigitado;
    int acertou = 0;

    do {
        printf("Adivinhe um número entre 1 e 100: ");
        scanf("%d", &numeroDigitado);

        if (numeroDigitado == -1) {
            printf("Saindo do jogo...\n");
            break;
        }

        if (numeroDado > numeroSorteado) {
            printf("O número digitado é maior que o número sorteado.\n");
        } else if (numeroDado < numeroSorteado) {
            printf("O número digitado é menor que o número sorteado.\n");
        } else {
            acertou = 1;
            printf("Você acertou o número: %d\n", numeroSorteado);
        }
    } while (!acertou);

    return 0;
}



3. Atividade com `for`:
- Descrição: Escreva um programa que calcule a soma dos primeiros 10 números inteiros positivos usando um loop `for`.
- Dica: Use uma variável acumuladora para calcular a soma.

#include <stdio.h>

int main() {
    int soma = 0;
    int i;

    for (i = 1; i <= 10; i++) {
        soma += i;
    }

    printf("A soma dos primeiros 10 números inteiros positivos é: %d\n", soma);

    return 0;
}


